#! /bin/bash
#global variables
numRows=0
numCols=0


# validateMatrix()
# parameter(s): File containing matrix to be verified
# function: Check matrix to assure requirements:
#   1. File is readable
#   2. Tab-delimited table
#   3. Must contain at least one element
#   4. Each element must be a signed int and defined
#   5. Table must be rectangular
#   6. Must not allow:
#           - empty matrix
#           - matrix where final entry on a row is a tab character
#           - matrix with empty lines
#           - matrix with any element that is blank or not an int
# output: If matrix is valid, there is no output and the program will resume with
#         executing the user command. 
#         If matrix is invalid then:
#                   - output an error message to stderr
#                   - return value should be non-zero
validateMatrix(){
    printf "validating matrix\n"
}

# dims()
# parameter(s): A matrix of integers which can be contained in a file or entered via stdin    
# function: Calculates the dimensions of the matrix
# output: Number of rows and the number of columns separated by a single space to stdout 
#         and return 0
# error handling: Print error message to stderr and return/exit 1
#       In the event that:
#           - argument count is  > 1
#           - file containing matrix cannot be read
dims(){
    #variable to store column count
    colCnt=0
    #read each line from  file or stdin into numLine
    while read numLine
        do
        #for each value read from numLine
        for i in $numLine
            do
            #increment colCnt by 1
            colCnt=$(expr $colCnt + 1)
        done
        #if global variable numCols has not been set yet
        if [ $numCols -eq 0 ]
            then
            #set numCols to initial colCnt
            numCols=$colCnt
        #else if colCnt is not equal to numCols
        elif [ $colCnt -ne $numCols ]
            then
            #print error message and exit
            printf "Error - invalid matrix\n"
            exit 1
        fi
        #reset colCnt for next line 
        colCnt=0
        #incmrenent global variable numRows
        numRows=$(expr $numRows + 1)
    #read commant will read from file provided via argument 1 
    #or via data being passed in from stdin
    done <$1
    #output of the results of the dimensions of the matrix
    printf "$numRows $numCols\n"
    return 0
}

# transpose()
# parameter(s): A matrix of integers which can be contained in a file or entered via stdin
# function: Relects matrix along the main diagnol. MxN => NxM
# output: Output the new matrix to stdout and return 0
# error handling: Print error message to stderr and return/exit 1
#       In the event that:
#           - argument count is  > 1
#           - file containing matrix cannot be read
transpose(){
    #temp files to store data
    tempCol=tempColFile$$
    tempRow=tempRowFile$$
    tempOutput=tempOutputFile$$
    #variable to keep count of the column to be cut
    colCnt=0

    #call dims to find number of columns for matrix
    dims $1 1>/dev/null #redirect output from stdout to /dev/null

    while [ $colCnt -ne $numCols ]
        do
        #increment colCnt
        colCnt=$(expr $colCnt + 1)
        #cut colCnt'th field
        cut -f $colCnt $1 >$tempCol
        #transform newline chars to tabs 
        cat $tempCol | tr '\n' '\t' >$tempRow
        temp=$(cat $tempRow)
        #removes trailing tab char
        temp=${temp::-1}
        #append row to output file
        echo "$temp" >>$tempOutput
    done

    #output transposed matrix to stdout
    cat $tempOutput
    #remove temp files
    rm -f $tempCol
    rm -f $tempRow
    rm -f $tempOutput
}

# mean() 
# parameter(s): A matrix of integers which can be contained in a file or entered via stdin
# function: Calculates the mean of the values for each column in the matrix
# output: Output the mean values for each row to stdout and return 0
# error handling: Print error message to stderr and return/exit 1
#       In the event that:
#           - argument count is  > 1
#           - file containing matrix cannot be read
mean(){
    #temp files to store data
    tempInput=tempInputFile$$
    tempOutput=tempOutputFile$$
    #variables
    numCnt=0 #count of the the numbers being added
    numSum=0 #sum of values being added
    meanVal=0 #mean value of the numbers being added

    ## using transpose to convert columns into rows so that I can use ##
    ## a while loop to read each line(row) and calculate the mean     ##

    #call transpose and redirect output to a tempFile
    transpose $1 | cat >$tempInput

    #read row of numbers from file into variable numLine
    while read numLine
        do
        #for each value in numLine
        for numVal in $numLine
            do
            #increment numCnt
            numCnt=$(expr $numCnt + 1)
            #added value in i to numSum
            numSum=$(expr $numSum + $numVal)
        done
        #find mean
        meanVal=$(( ($numSum + ($numCnt / 2)*( ($numSum > 0)*2 - 1 )) / $numCnt ))
        #echo  -e "numSum: $numSum\tnumCnt: $numCnt\tmeanVal: $meanVal"   
        #append mean value to tempOutput
        echo -en "$meanVal\t" >>$tempOutput
        #zero out variables before beginning next iteration
        numCnt=0
        numSum=0
        meanVal=0
    done <$tempInput

    #removes trailing tab char
    temp=$(cat $tempOutput)
    temp=${temp::-1}
    #add newline char to end of line
    echo "$temp" > $tempOutput

    cat $tempOutput

    #remove tempFiles
    rm -f $tempInput
    rm -f $tempOutput
}

# add()
# parameter(s): Two matrices contained within files   
# function: Adds the two matrices element wise to produce another matrix
# output: Output the new matrix containing all the sum values to stdout 
#         and return 0
# error handling: Print error message to stderr and return/exit 1
#       In the event that:
#           - argument count is != 2
#           - either file containing a matrix cannot be read
#           - the dimensions of the input matrices do not allow them to be 
#             added together following the rules of matrix addition
add(){
    #temp files
    tempInput=tempInputFile$$
    tempRowA=tempRowAFile$$
    tempRowB=tempRowBFile$$
    tempSum=tempSumFile$$
    tempOutput=tempOutputFile$$
    #variables
    numRowsA=0
    numColsA=0
    numRowsB=0
    numColsB=0
    colCnt=1
    sum=0

    #echo results from dims on matrix in arg 1 into a temp input file
    echo $(dims $1) >$tempInput
    #read values into the variables from temp input file
    read numRowsA numColsA <$tempInput
    #repeat on matrix in arg 2
    echo $(dims $2) >$tempInput
    read numRowsB numColsB <$tempInput
    #remove temp input file
    rm -f $tempInput

    #checks to make sure the dimensions of the matrices are the same before performing add
    if [ $numRowsA -ne $numRowsB ] || [ $numColsA -ne $numColsB ]
        then
        #output corresponding error message to stderr
        echo -e "Error executing add - $1 and $2 must be the same dimensions" 1>/dev/stderr
        #return non-zero value
        return 1
    fi

    #this was taken from the post in Piazza(copied from StackExchange) 
    #on reading two files simultanesously
    while IFS= read -r numLineA && IFS= read -r numLineB <&3
        do
        #echo lines read into temp files
        echo "$numLineA" >$tempRowA
        echo "$numLineB" >$tempRowB
        #iterate through each column of values
        while [ $colCnt -le $numColsA ]
            do
            #cut colCnt'th column from each row of each temp file
            numA=$(cut -f $colCnt $tempRowA)
            numB=$(cut -f $colCnt $tempRowB)
            #add those two values
            sum=$(expr $numA + $numB)
            echo -ne "$sum\t" >>$tempSum
            #increment counter to next column
            colCnt=$(expr $colCnt + 1)
        done
        #remove trailing tab 
        temp=$(cat $tempSum)
        temp=${temp::-1}
        #echo formatted row onto the temp output file
        echo -ne "$temp" >>$tempOutput
        #clear $tempSum file for next set of data
        echo > $tempSum
        #return colCnt to 1 before iterating through the next line read
        colCnt=1 
    done <$1 3<$2

    #add final newline char after last row of data is appended
    echo >>$tempOutput
    #output resulting matrix
    cat $tempOutput

    rm -f $tempRowA
    rm -f $tempRowB
    rm -f $tempSum
    rm -f $tempOutput
}

# multiply() operation call - 
# parameter(s):    
# function: 
# output: 
# error handling: Print error message to stderr and return/exit 1
#       In the event that:
#           - argument count is != 2
#           - either file containing a matrix cannot be read
#           - the dimensions of the input matrices do not allow them to be 
#             multiplied together following the rules of matrix multiplication
multiply(){
    #temp files
    tempInput=tempInputFile$$
    tempRowA=tempRowAFile$$
    tempColB=tempColBFile$$
    tempSum=tempSumFile$$
    tempOutput=tempOutputFile$$
    #variables
    numRowsA=0
    numColsA=0
    numRowsB=0
    numColsB=0
    colCnt=1 #number of the column to cut from matrix B
    numCnt=1 #index of the number to cut from the two slices from each matrix
             #if numCnt=1 then we will multiply the value in the 1st position 
             #in the row and also column

    #echo results from dims on matrix in arg 1 into a temp input file
    echo $(dims $1) >$tempInput
    #read values into the variables from temp input file
    read numRowsA numColsA <$tempInput
    #repeat on matrix in arg 2
    echo $(dims $2) >$tempInput
    read numRowsB numColsB <$tempInput
    #remove temp input file
    rm -f $tempInput

    #checks to make sure the dimensions of the matrices are the same before performing matrix multiplication
    if [ $numColsA -ne $numRowsB ]
        then
        #output corresponding error message to stderr
        echo -e "Error executing multiplication - matrix dimensions are invalid for this operation" 1>/dev/stderr
        #return non-zero value
        return 1
    fi

    #resulting matrix dimensions will be equal to numRowsA x numColsB
    #use nested loops to iterate through each position of the resulting index
    #grab corresponding row and column from the input matrices
    #do calculation
    #output to resulting matrix
    while IFS= read -r numLineA
        do
        #extract read row from matrix A into a temp file
        echo "$numLineA" >$tempRowA
        colCnt=1
        #for each column from Matrix B
        while [ $colCnt -le $numColsB ]
            do
            #extract column into another temp file
            cut -f $numCnt $2 >$tempColB
            #for each 
                #cut from tempRowA
                #cut from tempRowB

                #multiply

                #add
                colCnt=$(expr $colCnt + 1)
        done
    done <$1

    rm -f $tempInput
    rm -f $tempRowA
    rm -f $tempColB
    rm -f $tempSum
    rm -f $tempOutput
}

###########################################################################
# 
#
#
#
###########################################################################

#echo -e "arg1: $1\targ2: $2\targ3: $3\t argc: $#"

filePath=tempFile$$
#operation == dims or transpose or mean
if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ]
    then
    #if user tries to pass more than two args to the above three operations
    if [ $# -gt 2 ]
        #handle error
        then
        #error message redirected from stdout to stderr
        echo -e "Error executing $1 - invalid number of arguments" 1>/dev/stderr
        return 1
    #three args total ($2 contains file name to be passed to operation) 
    elif [ $# = 2 ]
        then
        #check file is exists and is readable
        if [ -a $2 ] && [ -r $2 ]
            then
            $1 $2
        else
            #error message redirected from stdout to stderr
            echo -e "Error executing $1 - file does not exist or is unreadable" 1>/dev/stderr
            return 1
        fi
    #two args total => means no file name passed => which means read from stdin
    else
        cat > $filePath
        $1 tempFile$$
        rm -f tempFile$$
    fi
#else if operation == add or multiply
elif [ $1 = "add" ] || [ $1 = "multiply" ]
    then
    #if total number of args != 3
    if [ $# -ne 3 ]
        then
            echo -e "Error executing $1 - invalid number of arguments" 1>/dev/stderr
            return 1
    else
        $1 $2 $3
    fi
#if arg 1 does not match one of the five operations
else
    echo "Error - bad command" 1>/dev/stderr
    return 1
fi

#$1 ${@:2}

